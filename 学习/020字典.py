# 一、字典(Dictionary)
# 1、什么是 dict（字典）
# 上一章节，我们学习了列表（List） 和 元组（tuple） 来表示有序集合。
#
# 而我们在讲列表（list）的时候，我们用了列表（list） 来存储用户的姓名。
#
# name = ['一点水', '两点水', '三点水', '四点水', '五点水']
# 那么如果我们为了方便联系这些童鞋，要把电话号码也添加进去，该怎么做呢？
#
# 用 list 可以这样子解决：
#
# name = [['一点水', '131456780001'], ['两点水', '131456780002'], ['三点水', '131456780003'], ['四点水', '131456780004'], ['五点水', '131456780005']]
# 但是这样很不方便，我们把电话号码记录下来，就是为了有什么事能及时联系上这些童鞋。
#
# 如果用列表来存储这些，列表越长，我们查找起来耗时就越长。
#
# 这时候就可以用 dict （字典）来表示了，Python 内置了 字典（dict），dict 全称 dictionary，如果学过 Java ，字典就相当于 JAVA 中的 map，使用键-值（key-value）存储，具有极快的查找速度。
#
# name = {'一点水': '131456780001', '两点水': '131456780002', '三点水': '131456780003', '四点水': '131456780004', '五点水': '131456780005'}

# 3、访问 dict （字典）
# 我们知道了怎么创建列表了，回归到一开始提出到的问题，为什么使用字典能让我们很快的找出某个童鞋的电话呢？
#
name = {
        '一点水': '131456780001',
        '两点水': '131456780002',
        '三点水': '131456780003',
        '四点水': '131456780004',
        '五点水': '131456780005'
        }

print(name['两点水'])

# 可以看到，如果你知道某个人的名字，也就是 key 值， 就能很快的查找到他对应的电话号码，也就是 Value 。

# 这里需要注意的一点是：如果字典中没有这个键，是会报错的。

# 4、修改 dict （字典）
# 向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对

#-*-coding:utf-8-*-
dict1={'liangdianshui':'111111' ,'twowater':'222222' ,'两点水':'333333'}
print(dict1)
# 新增一个键值对
dict1['jack']='444444'
print(dict1)
# 修改键值对
dict1['liangdianshui']='555555'
print(dict1)

# 5、删除 dict （字典）
# 通过 del 可以删除 dict （字典）中的某个元素，也能删除 dict （字典）
#
# 通过调用 clear() 方法可以清除字典中的所有元素

#-*-coding:utf-8-*-
dict1={'liangdianshui':'111111' ,'twowater':'222222' ,'两点水':'333333'}
print(dict1)
# 通过 key 值，删除对应的元素
del dict1['twowater']
print(dict1)
# 删除字典中的所有元素
dict1.clear()
print(dict1)
# 删除字典
del dict1
# print(dict1)

# 6、 dict （字典）使用时注意的事项
# (1) dict （字典）是不允许一个键创建两次的，但是在创建 dict （字典）的时候如果出现了一个键值赋予了两次，会以最后一次赋予的值为准
#
# 例如：
dict1={'liangdianshui':'111111' ,'twowater':'222222' ,'两点水':'333333','twowater':'444444'}
print(dict1)
print(dict1['twowater'])


# (2) dict （字典）键必须不可变，可是键可以用数字，字符串或元组充当，但是就是不能使用列表
#
# 例如：
dict1={'liangdianshui':'111111' ,123:'222222' ,(123,'tom'):'333333','twowater':'444444'}
print(dict1)

# (3) dict 内部存放的顺序和 key 放入的顺序是没有任何关系
#
# 和 list 比较，dict 有以下几个特点：
#
# 查找和插入的速度极快，不会随着key的增加而变慢
#
# 需要占用大量的内存，内存浪费多
#
# 而list相反：
#
# 查找和插入的时间随着元素的增加而增加
#
# 占用空间小，浪费内存很少